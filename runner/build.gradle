buildscript {
   repositories {
//      maven {
//         url 'http://maven.aliyun.com/nexus/content/groups/public'
//      }

      jcenter()
      mavenCentral()
   }
}

plugins {
   id 'org.springframework.boot' version '2.1.6.RELEASE'
   id 'io.spring.dependency-management' version '1.0.9.RELEASE'
   id 'java'
   id 'jacoco'
}

sourceCompatibility = '1.8'

configurations {
   all {
      exclude group: 'commons-logging'
      exclude group: 'log4j'
   }

   api
   tools
   developmentOnly
   compile.extendsFrom(api)
   compileOnly.extendsFrom(tools, annotationProcessor)
}

repositories {
//   maven {
//      url 'http://maven.aliyun.com/nexus/content/groups/public'
//   }

   jcenter()
   mavenCentral()
}

dependencies {
   // api
   implementation project(":jf-commons")
   implementation project(":jf-echarts")

   // Spring
   implementation 'org.springframework.boot:spring-boot-starter-web'
   // ORM
   implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   // Java Mail
   implementation 'org.springframework.boot:spring-boot-starter-mail'
   // AMQP
   implementation 'org.springframework.boot:spring-boot-starter-amqp'
   // WebSocket
   implementation 'org.springframework.boot:spring-boot-starter-websocket'
   // Quartz
   implementation 'org.springframework.boot:spring-boot-starter-quartz'

   // template
   implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
   implementation "ognl:ognl:${ognlVersion}"

   // Cache
   implementation 'org.springframework.boot:spring-boot-starter-cache'
   implementation 'net.sf.ehcache:ehcache'
   implementation 'org.springframework.boot:spring-boot-starter-data-redis'

   // datasource
   runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"
   runtimeOnly 'com.h2database:h2' // for test and develop mode
   implementation "com.alibaba:druid:${druidVersion}"

   // security
   implementation("org.apache.shiro:shiro-ehcache:${shiroVersion}") {
      exclude(group: 'net.sf.ehcache')
   }
   implementation "org.apache.shiro:shiro-spring:${shiroVersion}"
   implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}"

   // poi
   implementation "org.apache.poi:poi:${poiVersion}"
   implementation "org.apache.poi:poi-ooxml-schemas:${poiVersion}"
   implementation "org.apache.poi:poi-ooxml:${poiVersion}"

   // iText
   implementation "com.itextpdf:itext7-core:${iTextVersion}"

   // lucene
   implementation "org.apache.lucene:lucene-core:${luceneVersion}"
   implementation "org.apache.lucene:lucene-queryparser:${luceneVersion}"
   implementation "org.apache.lucene:lucene-analyzers-common:${luceneVersion}"

   // tools
   implementation "org.apache.commons:commons-lang3"
//   implementation 'org.springframework.boot:spring-boot-devtools'
   annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

   // springfox swagger
   implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
   implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"

   // urlrewritefilter
   implementation "org.tuckey:urlrewritefilter:${urlRewriteFilterversion}"

   // http client
   implementation "org.apache.httpcomponents:httpclient:${httpClientVersion}"

   // webjars
   implementation "org.webjars:jquery:${jqueryVersion}"
   implementation "org.webjars:bootstrap:${bootstrapVersion}"

   // test
   testImplementation('org.springframework.boot:spring-boot-starter-test') {
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
      exclude group: 'org.junit.platform', module: 'junit-platform-engine'
      exclude group: 'org.junit.platform', module: 'junit-platform-commons'
   }

   testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}") {
      exclude group: 'org.junit.platform', module: 'junit-platform-commons'
   }
   testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}") {
      exclude group: 'org.junit.platform', module: 'junit-platform-commons'
   }

   testImplementation("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}") {
      exclude group: 'org.junit.platform', module: 'junit-platform-engine'
      exclude group: 'org.junit.platform', module: 'junit-platform-commons'
   }
   testImplementation "org.junit.platform:junit-platform-engine:${junitEngineVersion}"
   testImplementation "org.junit.platform:junit-platform-commons:${junitEngineVersion}"
}

test {
   useJUnitPlatform()

   testLogging {
      events "passed", "skipped", "failed"
   }
}

processResources {
   onlyIf {
      !file("$buildDir/resources/main/application.yml").exists()
   }

   exclude '**/jfoadb/sql'

//   filesMatching('application.yml') {
//      String replacement = rootProject.project("${webModule}").projectDir.getCanonicalPath().replace('\\', '/')
//      replacement += '/dist'
//      filter ReplaceTokens, tokens: ['WEB_DIST_DIR': replacement]
//   }
}

task cleanAll(type: Delete, dependsOn: [clean]) {
   group 'build'
   delete = [ 'out', 'logs' ]
}

task server() {
   group 'application'
   description 'run the application'

   doFirst {
      file("$buildDir/server-temp").mkdirs()
   }

   doLast {
      javaexec {
         classpath sourceSets.main.runtimeClasspath
         def envMode = productionBuild ? 'prod' : 'dev'
         def debugCmd = productionBuild
            ? ''
            : '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'

         def hostName = productionBuild
            ? '101.133.167.196'
            : '127.0.0.1'

         def remotePwdFilePath = "$buildDir/resources/main/config/ssl/jmxremote.password"
         def remoteAccessFilePath = "$buildDir/resources/main/config/ssl/jmxremote.access"

         main = 'club.javafamily.runner.RunnerApplication'
         jvmArgs = [
            "-Dspring.profiles.active=${envMode}",
            "-Djava.io.tmpdir=$buildDir/server-temp",
            "-Djava.rmi.server.hostname=${hostName}",
            '-Dcom.sun.management.jmxremote.port=10888',
            '-Dcom.sun.management.jmxremote.ssl=false',
            '-Dcom.sun.management.jmxremote.authenticate=true',
            "-Dcom.sun.management.jmxremote.access.file=${remoteAccessFilePath}",
            "-Dcom.sun.management.jmxremote.password.file=${remotePwdFilePath}",
            debugCmd]
         args = []
      }
   }
}

jacocoTestReport {
   reports {
      xml.enabled true
      html.enabled false
   }
}

check.dependsOn jacocoTestReport

tasks.bootJar.configure {
   archivesBaseName = "javafamily-oa"
}

tasks.bootJar.dependsOn(tasks.findByPath(":${webModule}:build"))
